const { loadCookie, saveCookie, updateCookieStatus } = require('../lib/firebaseManager');
const fs = require('fs-extra');
const axios = require('axios');
const logger = require('./log.js');
const path = require('path');

class CookieMonitor {
  constructor() {
    this.isMonitoring = false;
    this.checkInterval = 5 * 60 * 1000; // 5 ph√∫t
    this.retryAttempts = 3;
    this.currentAttempt = 0;
    this.email = process.env.FB_EMAIL || 'ngonhatlongffff@gmail.com';
    this.password = process.env.FB_PASSWORD || 'Nhatlong_10102006';
  }

  // Ki·ªÉm tra s·ª©c kh·ªèe cookie
  async checkCookieHealth(cookie) {
    try {
      const cookieString = cookie.map(c => `${c.key}=${c.value}`).join('; ');
      
      const response = await axios.get('https://graph.facebook.com/me?fields=name,id', {
        headers: {
          'Cookie': cookieString,
          'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Mobile/15E148 Safari/604.1'
        },
        timeout: 10000
      });

      if (response.data && response.data.name && response.data.id) {
        logger(`‚úÖ Cookie ho·∫°t ƒë·ªông t·ªët - User: ${response.data.name}`, "COOKIE_MONITOR");
        return { healthy: true, user: response.data };
      } else {
        logger(`‚ö†Ô∏è Cookie kh√¥ng h·ª£p l·ªá - Response: ${JSON.stringify(response.data)}`, "COOKIE_MONITOR");
        return { healthy: false, reason: 'invalid_response' };
      }
    } catch (error) {
      if (error.response) {
        const status = error.response.status;
        const data = error.response.data;
        
        if (status === 401 || status === 403) {
          logger(`‚ùå Cookie ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã ch·∫∑n (${status})`, "COOKIE_MONITOR");
          return { healthy: false, reason: 'expired_or_blocked' };
        } else if (status === 400) {
          logger(`‚ö†Ô∏è Cookie c√≥ v·∫•n ƒë·ªÅ (${status}) - ${JSON.stringify(data)}`, "COOKIE_MONITOR");
          return { healthy: false, reason: 'bad_request' };
        }
      }
      
      logger(`‚ùå L·ªói ki·ªÉm tra cookie: ${error.message}`, "COOKIE_MONITOR");
      return { healthy: false, reason: 'network_error' };
    }
  }

  // T·∫°o cookie m·ªõi t·ª´ API
  async generateNewCookie() {
    try {
      logger(`üîÑ ƒêang t·∫°o cookie m·ªõi cho ${this.email}...`, "COOKIE_MONITOR");
      
      const otpkey = process.env.FB_OTPKEY || "";
      const url = `https://api-j7hu.onrender.com/fblogin?user=${this.email}&pass=${this.password}&twofactor=${otpkey}`;
      
      const response = await axios.get(url, { timeout: 30000 });
      
      if (response.data.status === true && response.data.data?.session_cookies) {
        const sessionCookies = response.data.data.session_cookies;
        const appState = sessionCookies.map(cookie => ({
          key: cookie.key,
          value: cookie.value,
          domain: cookie.domain,
          path: cookie.path,
          secure: true,
          httpOnly: true
        }));

        // L∆∞u cookie m·ªõi l√™n Firebase
        await saveCookie(appState, this.email);
        
        // Ghi ra file appstate.json
        const appstatePath = path.join(process.cwd(), 'appstate.json');
        await fs.writeJson(appstatePath, appState, { spaces: 2 });
        
        logger(`‚úÖ Cookie m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† l∆∞u th√†nh c√¥ng`, "COOKIE_MONITOR");
        return appState;
      } else {
        throw new Error('API kh√¥ng tr·∫£ v·ªÅ session_cookies h·ª£p l·ªá');
      }
    } catch (error) {
      logger(`‚ùå L·ªói t·∫°o cookie m·ªõi: ${error.message}`, "COOKIE_MONITOR");
      return null;
    }
  }

  // Thay th·∫ø cookie
  async replaceCookie() {
    try {
      this.currentAttempt++;
      logger(`üîÑ L·∫ßn th·ª≠ ${this.currentAttempt}/${this.retryAttempts} - ƒêang thay th·∫ø cookie...`, "COOKIE_MONITOR");
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i cookie hi·ªán t·∫°i
      await updateCookieStatus('replacing', this.email);
      
      // T·∫°o cookie m·ªõi
      const newCookie = await this.generateNewCookie();
      
      if (newCookie) {
        // Ki·ªÉm tra cookie m·ªõi
        const healthCheck = await this.checkCookieHealth(newCookie);
        
        if (healthCheck.healthy) {
          await updateCookieStatus('active', this.email);
          logger(`‚úÖ Cookie ƒë√£ ƒë∆∞·ª£c thay th·∫ø th√†nh c√¥ng`, "COOKIE_MONITOR");
          this.currentAttempt = 0;
          
          // Emit event ƒë·ªÉ restart bot
          if (typeof process.emit === 'function') {
            process.emit('cookie_replaced', newCookie);
          }
          
          return newCookie;
        } else {
          logger(`‚ùå Cookie m·ªõi kh√¥ng ho·∫°t ƒë·ªông: ${healthCheck.reason}`, "COOKIE_MONITOR");
          await updateCookieStatus('failed', this.email);
        }
      }
      
      // Th·ª≠ l·∫°i n·∫øu ch∆∞a ƒë·∫°t gi·ªõi h·∫°n
      if (this.currentAttempt < this.retryAttempts) {
        logger(`‚è≥ Ch·ªù 30 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...`, "COOKIE_MONITOR");
        await new Promise(resolve => setTimeout(resolve, 30000));
        return await this.replaceCookie();
      } else {
        logger(`‚ùå ƒê√£ th·ª≠ ${this.retryAttempts} l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng`, "COOKIE_MONITOR");
        await updateCookieStatus('failed', this.email);
        return null;
      }
    } catch (error) {
      logger(`‚ùå L·ªói thay th·∫ø cookie: ${error.message}`, "COOKIE_MONITOR");
      return null;
    }
  }

  // Ki·ªÉm tra v√† s·ª≠a ch·ªØa cookie
  async checkAndFixCookie() {
    try {
      // ƒê·ªçc cookie hi·ªán t·∫°i t·ª´ file
      const appstatePath = path.join(process.cwd(), 'appstate.json');
      let currentCookie;
      
      try {
        currentCookie = await fs.readJson(appstatePath);
      } catch (error) {
        logger(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file appstate.json: ${error.message}`, "COOKIE_MONITOR");
        currentCookie = null;
      }
      
      if (!currentCookie || currentCookie.length === 0) {
        logger(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y cookie trong file, ƒëang t·∫£i t·ª´ Firebase...`, "COOKIE_MONITOR");
        currentCookie = await loadCookie(this.email);
      }
      
      if (!currentCookie) {
        logger(`‚ùå Kh√¥ng t√¨m th·∫•y cookie n√†o, ƒëang t·∫°o m·ªõi...`, "COOKIE_MONITOR");
        return await this.replaceCookie();
      }
      
      // Ki·ªÉm tra s·ª©c kh·ªèe cookie
      const healthCheck = await this.checkCookieHealth(currentCookie);
      
      if (healthCheck.healthy) {
        logger(`‚úÖ Cookie ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`, "COOKIE_MONITOR");
        await updateCookieStatus('active', this.email);
        return currentCookie;
      } else {
        logger(`‚ö†Ô∏è Cookie c√≥ v·∫•n ƒë·ªÅ: ${healthCheck.reason}`, "COOKIE_MONITOR");
        return await this.replaceCookie();
      }
    } catch (error) {
      logger(`‚ùå L·ªói ki·ªÉm tra cookie: ${error.message}`, "COOKIE_MONITOR");
      return null;
    }
  }

  // B·∫Øt ƒë·∫ßu gi√°m s√°t
  startMonitoring() {
    if (this.isMonitoring) {
      logger(`‚ö†Ô∏è Cookie monitor ƒë√£ ƒëang ch·∫°y`, "COOKIE_MONITOR");
      return;
    }
    
    this.isMonitoring = true;
    logger(`üöÄ B·∫Øt ƒë·∫ßu gi√°m s√°t cookie (ki·ªÉm tra m·ªói ${this.checkInterval / 60000} ph√∫t)`, "COOKIE_MONITOR");
    
    // Ki·ªÉm tra ngay l·∫≠p t·ª©c
    this.checkAndFixCookie();
    
    // Thi·∫øt l·∫≠p interval
    this.monitorInterval = setInterval(async () => {
      if (this.isMonitoring) {
        await this.checkAndFixCookie();
      }
    }, this.checkInterval);
  }

  // D·ª´ng gi√°m s√°t
  stopMonitoring() {
    if (this.monitorInterval) {
      clearInterval(this.monitorInterval);
      this.monitorInterval = null;
    }
    this.isMonitoring = false;
    logger(`‚èπÔ∏è ƒê√£ d·ª´ng gi√°m s√°t cookie`, "COOKIE_MONITOR");
  }

  // Ki·ªÉm tra tr·∫°ng th√°i gi√°m s√°t
  getStatus() {
    return {
      isMonitoring: this.isMonitoring,
      currentAttempt: this.currentAttempt,
      maxAttempts: this.retryAttempts,
      checkInterval: this.checkInterval,
      email: this.email
    };
  }
}

// T·∫°o instance singleton
const cookieMonitor = new CookieMonitor();

// Export instance v√† class
module.exports = cookieMonitor;
module.exports.CookieMonitor = CookieMonitor; 